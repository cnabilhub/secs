{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Software Engineer Cheat Sheet Hi there \ud83d\udc4b, I'm Nabil , This my wiki website it is simply a collection of cheat sheets for various software engineering tasks. You can use them as quick references or guides to help you with your projects. If you find this resource useful, please consider giving it a star on GitHub. Follow me on : Github | Twitter | CNabil.con","title":"Home"},{"location":"#software-engineer-cheat-sheet","text":"Hi there \ud83d\udc4b, I'm Nabil , This my wiki website it is simply a collection of cheat sheets for various software engineering tasks. You can use them as quick references or guides to help you with your projects. If you find this resource useful, please consider giving it a star on GitHub. Follow me on : Github | Twitter | CNabil.con","title":"Software Engineer Cheat Sheet"},{"location":"about/","text":"Hi there \ud83d\udc4b, I'm Nabil Im a self-taught web developer, I have been passionate about tech and programming for many years, I started by curiosity and loving computers until I became a geek programmer. After years of experience, I went to be a freelancer, and I helped many clients build their applications and websites professionally, and I contributed to many open source project. I always push my self to develop my skills as a programmer by looking at the latest technology news and frameworks and reading their documentation. I use Laravel and Vue JS frameworks as my stack, but I am open to any other technologies.### Hi there \ud83d\udc4b, I'm Nabil Im a self-taught web developer, I have been passionate about tech and programming for many years, I started by curiosity and loving computers until I became a geek programmer. After years of experience, I went to be a freelancer, and I helped many clients build their applications and websites professionally, and I contributed to many open source project. I always push my self to develop my skills as a programmer by looking at the latest technology news and frameworks and reading their documentation. I use Laravel and Vue JS frameworks as my stack, but I am open to any other technologies. I'm happy to work with you as a freelancer and develop your applications professionally, thank you for your time. Skills: HTML / CSS / SASS / Bootstrap / Tailwind CSS / Javascript / Vue JS / PHP / Laravel / Git / Github / Docker \ud83d\udd2d I\u2019m currently working on Personal Laravel projects \ud83c\udf31 I\u2019m currently learning Laravel \ud83d\udc6f I\u2019m looking to collaborate on Open source projects \ud83d\udcac Ask me about Anything","title":"About"},{"location":"about/#hi-there-im-nabil","text":"Im a self-taught web developer, I have been passionate about tech and programming for many years, I started by curiosity and loving computers until I became a geek programmer. After years of experience, I went to be a freelancer, and I helped many clients build their applications and websites professionally, and I contributed to many open source project. I always push my self to develop my skills as a programmer by looking at the latest technology news and frameworks and reading their documentation. I use Laravel and Vue JS frameworks as my stack, but I am open to any other technologies.### Hi there \ud83d\udc4b, I'm Nabil Im a self-taught web developer, I have been passionate about tech and programming for many years, I started by curiosity and loving computers until I became a geek programmer. After years of experience, I went to be a freelancer, and I helped many clients build their applications and websites professionally, and I contributed to many open source project. I always push my self to develop my skills as a programmer by looking at the latest technology news and frameworks and reading their documentation. I use Laravel and Vue JS frameworks as my stack, but I am open to any other technologies. I'm happy to work with you as a freelancer and develop your applications professionally, thank you for your time. Skills: HTML / CSS / SASS / Bootstrap / Tailwind CSS / Javascript / Vue JS / PHP / Laravel / Git / Github / Docker \ud83d\udd2d I\u2019m currently working on Personal Laravel projects \ud83c\udf31 I\u2019m currently learning Laravel \ud83d\udc6f I\u2019m looking to collaborate on Open source projects \ud83d\udcac Ask me about Anything","title":"Hi there \ud83d\udc4b, I'm Nabil"},{"location":"basic-linux-commands/","text":"Linux commands Linux is a family of open-source Unix-like operating systems based on the Linux kernel, an operating system kernel first released on September 17, 1991, by Linus Torvalds. Basics Command Description ls Lists all files and directories in the present working directory ls -R Lists files in sub-directories as well ls -a Lists hidden files as well ls -al Lists files and directories with detailed information like permissions,size, owner, etc. cd or cd ~ Navigate to HOME directory cd .. Move one level up cd To change to a particular directory cd / Move to the root directory cat > filename Creates a new file cat filename Displays the file content cat file1 file2 > file3 Joins two files (file1, file2) and stores the output in a new file (file3) mv file \"new file path\" Moves the files to the new location mv filename new_file_name Renames the file to a new filename sudo Allows regular users to run programs with the security privileges of the superuser or root rm filename Deletes a file man Gives help information on a command history Gives a list of all past commands typed in the current terminal session clear Clears the terminal mkdir directoryname Creates a new directory in the present working directory or a at the specified path rmdir Deletes a directory mv Renames a directory pr -x Divides the file into x columns pr -h Assigns a header to the file pr -n Denotes the file with Line Numbers lp -nc , lpr c Prints \u201cc\u201d copies of the File lp-d lp-P Specifies name of the printer apt-get Command used to install and update packages mail -s 'subject'-c 'cc-address'-b 'bcc-address''to-address' Command to send email mail -s \"Subject\"to-address < Filename Command to send email with attachment File Permission commands Command Description ls -l to show file type and access permission r read permission w write permission x execute permission -= no permission Chown user For changing the ownership of a file/directory Chown user:group filename change the user as well as group for a file or directory Environment Variables command Command Description echo $VARIABLE To display value of a variable env Displays all environment variables VARIABLE_NAME= variable_value Create a new variable Unset Remove a variable export Variable=value To set value of an environment variable User management commands of linux Command Description sudo adduser username To add a new user sudo passwd -l 'username' To change the password of a user sudo userdel -r 'username' To remove a newly created user sudo usermod -a -G GROUPNAME USERNAME To add a user to a group sudo deluser USER GROUPNAME To remove a user from a group finger Shows information of all the users logged in finger username Gives information of a particular user Networking command Command Description SSH username@ip-address or hostname login into a remote Linux machine using SSH Ping hostname=\"\" or =\"\" To ping and Analyzing network and host connections dir Display files in the current directory of a remote computer cd \"dirname\" change directory to \u201cdirname\u201d on a remote computer put file upload \u2018file\u2019 from local to remote computer get file Download \u2018file\u2019 from remote to local computer quit Logout Process command Command Description bg To send a process to the background fg To run a stopped process in the foreground top Details on all Active Processes ps Give the status of processes running for a user ps PID Gives the status of a particular process pidof Gives the Process ID (PID) of a process kill PID Kills a process nice Starts a process with a given priority renice Changes priority of an already running process df Gives free hard disk space on your system free Gives free RAM on your system VI Editing Commands VI is a text editor that is included by default with every UNIX and Linux system. It is one of the most commonly used editor programs. It operates in 3 modes: vi mode, command mode, and input mode. In command mode, you can use keyboard keys to navigate, delete, copy, paste, and do a number of other tasks\u2014except entering text. To enter Insert mode, press i Command Description i Insert at cursor (goes into insert mode) a Write after cursor (goes into insert mode) A Write at the end of line (goes into insert mode) ESC Terminate insert mode u Undo last change U Undo all changes to the entire line o Open a new line (goes into insert mode) dd Delete line 3dd Delete 3 lines D Delete contents of line after the cursor C Delete contents of a line after the cursor and insert new text. Press ESC key to end insertion. dw Delete word 4dw Delete 4 words cw Change word x Delete character at the cursor r Replace character R Overwrite characters from cursor onward s Substitute one character under cursor continue to insert S Substitute entire line and begin to insert at the beginning of the line ~ Change case of individual character","title":"Linux commands"},{"location":"basic-linux-commands/#linux-commands","text":"Linux is a family of open-source Unix-like operating systems based on the Linux kernel, an operating system kernel first released on September 17, 1991, by Linus Torvalds.","title":"Linux commands"},{"location":"basic-linux-commands/#basics","text":"Command Description ls Lists all files and directories in the present working directory ls -R Lists files in sub-directories as well ls -a Lists hidden files as well ls -al Lists files and directories with detailed information like permissions,size, owner, etc. cd or cd ~ Navigate to HOME directory cd .. Move one level up cd To change to a particular directory cd / Move to the root directory cat > filename Creates a new file cat filename Displays the file content cat file1 file2 > file3 Joins two files (file1, file2) and stores the output in a new file (file3) mv file \"new file path\" Moves the files to the new location mv filename new_file_name Renames the file to a new filename sudo Allows regular users to run programs with the security privileges of the superuser or root rm filename Deletes a file man Gives help information on a command history Gives a list of all past commands typed in the current terminal session clear Clears the terminal mkdir directoryname Creates a new directory in the present working directory or a at the specified path rmdir Deletes a directory mv Renames a directory pr -x Divides the file into x columns pr -h Assigns a header to the file pr -n Denotes the file with Line Numbers lp -nc , lpr c Prints \u201cc\u201d copies of the File lp-d lp-P Specifies name of the printer apt-get Command used to install and update packages mail -s 'subject'-c 'cc-address'-b 'bcc-address''to-address' Command to send email mail -s \"Subject\"to-address < Filename Command to send email with attachment","title":"Basics"},{"location":"basic-linux-commands/#file-permission-commands","text":"Command Description ls -l to show file type and access permission r read permission w write permission x execute permission -= no permission Chown user For changing the ownership of a file/directory Chown user:group filename change the user as well as group for a file or directory","title":"File Permission commands"},{"location":"basic-linux-commands/#environment-variables-command","text":"Command Description echo $VARIABLE To display value of a variable env Displays all environment variables VARIABLE_NAME= variable_value Create a new variable Unset Remove a variable export Variable=value To set value of an environment variable","title":"Environment Variables command"},{"location":"basic-linux-commands/#user-management-commands-of-linux","text":"Command Description sudo adduser username To add a new user sudo passwd -l 'username' To change the password of a user sudo userdel -r 'username' To remove a newly created user sudo usermod -a -G GROUPNAME USERNAME To add a user to a group sudo deluser USER GROUPNAME To remove a user from a group finger Shows information of all the users logged in finger username Gives information of a particular user","title":"User management commands of linux"},{"location":"basic-linux-commands/#networking-command","text":"Command Description SSH username@ip-address or hostname login into a remote Linux machine using SSH Ping hostname=\"\" or =\"\" To ping and Analyzing network and host connections dir Display files in the current directory of a remote computer cd \"dirname\" change directory to \u201cdirname\u201d on a remote computer put file upload \u2018file\u2019 from local to remote computer get file Download \u2018file\u2019 from remote to local computer quit Logout","title":"Networking command"},{"location":"basic-linux-commands/#process-command","text":"Command Description bg To send a process to the background fg To run a stopped process in the foreground top Details on all Active Processes ps Give the status of processes running for a user ps PID Gives the status of a particular process pidof Gives the Process ID (PID) of a process kill PID Kills a process nice Starts a process with a given priority renice Changes priority of an already running process df Gives free hard disk space on your system free Gives free RAM on your system","title":"Process command"},{"location":"basic-linux-commands/#vi-editing-commands","text":"VI is a text editor that is included by default with every UNIX and Linux system. It is one of the most commonly used editor programs. It operates in 3 modes: vi mode, command mode, and input mode. In command mode, you can use keyboard keys to navigate, delete, copy, paste, and do a number of other tasks\u2014except entering text. To enter Insert mode, press i Command Description i Insert at cursor (goes into insert mode) a Write after cursor (goes into insert mode) A Write at the end of line (goes into insert mode) ESC Terminate insert mode u Undo last change U Undo all changes to the entire line o Open a new line (goes into insert mode) dd Delete line 3dd Delete 3 lines D Delete contents of line after the cursor C Delete contents of a line after the cursor and insert new text. Press ESC key to end insertion. dw Delete word 4dw Delete 4 words cw Change word x Delete character at the cursor r Replace character R Overwrite characters from cursor onward s Substitute one character under cursor continue to insert S Substitute entire line and begin to insert at the beginning of the line ~ Change case of individual character","title":"VI Editing Commands"},{"location":"emacs-editor/","text":"Emacs Editor Emacs, originally named EMACS, is a family of text editors that are characterized by their extensibility. The manual for the most widely used variant, GNU Emacs, describes it as \"the extensible, customizable, self-documenting, real-time display editor\" Shortcut Keys Used C = Control Key M = Meta Key (Alt on PCs, Option on Macs) Examples: C-a = Hold control, press 'a'. C-x o = Hold control, press 'x', release both, press 'o' (oh, not zero). Basics Keys Description C-x C-c Quit Emacs. C-g Cancel any in progress keybinding/shortcut command. C-x C-s Save current buffer. C-x b Switch to a different buffer. C-x k Kill/close current buffer. C-x C-f Open a file. C-/ Undo the last action. Movement In addition to the arrow keys, these keybindings allow for cursor movements. Buffer/File Keys Description M-< Move to beginning of buffer/file. M-> Move to end of buffer/file. C-v Move one screen forward. M-v Move one screen backward. C-l Center screen on position at cursor. Lines Keys Description C-a Move to beginning of line. C-e Move to end of line. C-n Move to the next line. C-p Move to the previous line. M-g g Go to line. Words Keys Description M-f Move forward one word. M-b Move backward one word. Characters Keys Description C-f Move forward one character. C-b Move backward one character. Searching Keys Description C-s Regex search for text in current buffer and move to it. Press C-s again to move to next match. C-r Same as C-s, but search in reverse. M-% Search and replace. Kill Ring (Copy/Cut/Paste) Keys Description C-spacebar Create a region (select). Use movement keys to expand the region selected. Then use copy/cut commands below. M-w Copy region to kill ring (copy). C-w Kill region (cut). C-y Yank (paste). M-y Cycle through kill ring after yanking/pasting. This is like a copy/paste clipboard. M-d Kill/delete word starting at cursor (cut). C-k Kill/delete line starting at cursor (cut). Editing Keys Description Tab Indent line. C-j New line and indent, equivalent to enter followed by tab. M-\\ Delete all spaces and tabs around point. C-d Delete the next character. M-backspace Delete previous word. C-x space (use movement keys to select up/down).C-x r t (type key to insert, then Enter) Rectangle mode Formatting Tricks Keys Description C-t Swap two characters at the point/cursor. M-u Change the word at the point/cursor to uppercase. M-l Change the word at the point/cursor to lowercase. C-u n char Insert 'n' (a number) copies of 'char' (a character). Help Keys Description C-h k key-binding Describe the function bound to the key binding. To get this to work, you actually perform the key sequence after typing C-h k. C-h f Describe function. Windows and Frame Keys Description C-x o Switch cursor to another window. C-x 1 Delete all other windows, leaving only the current window in the frame. This doesn\u2019t close your buffers, and it won\u2019t cause you to lose any work. C-x 2 Split frame above and below. C-x 3 Split frame side by side. C-x 0 Delete current window. Plugin: Cider Clojure Files Keys Description C-c M-n M-n Switch to namespace of current buffer. C-x C-e Evaluate expression immediately preceding point. C-c C-k Compile current buffer/file. C-c C-d C-d Display documentation for symbol under point. M-. and M-, Navigate to source code for symbol under point and return to your original buffer. C-c C-d C-a Apropros search; find arbitrary text across function names and documentation. REPL Keys Description M-x cider-jack-in Start a REPL. C-c C-x C-j C-j Alternative to start a REPL. C-\u2191, C-\u2193 Cycle through REPL history. C-enter Close parentheses and evaluate. Plugin: Paredit Keys Description M-x paredit-mode Toggle paredit mode. M-( Surround expression after point in parentheses (paredit-wrap-round). C-\u2192 Slurp; move closing parenthesis to the right to include next expression. C-\u2190 Barf; move closing parenthesis to the left to exclude last expression. C-M-f, C-M-b Move to the opening/closing parenthesis.","title":"Emacs commands"},{"location":"emacs-editor/#emacs-editor","text":"Emacs, originally named EMACS, is a family of text editors that are characterized by their extensibility. The manual for the most widely used variant, GNU Emacs, describes it as \"the extensible, customizable, self-documenting, real-time display editor\"","title":"Emacs Editor"},{"location":"emacs-editor/#shortcut-keys-used","text":"C = Control Key M = Meta Key (Alt on PCs, Option on Macs) Examples: C-a = Hold control, press 'a'. C-x o = Hold control, press 'x', release both, press 'o' (oh, not zero).","title":"Shortcut Keys Used"},{"location":"emacs-editor/#basics","text":"Keys Description C-x C-c Quit Emacs. C-g Cancel any in progress keybinding/shortcut command. C-x C-s Save current buffer. C-x b Switch to a different buffer. C-x k Kill/close current buffer. C-x C-f Open a file. C-/ Undo the last action.","title":"Basics"},{"location":"emacs-editor/#movement","text":"In addition to the arrow keys, these keybindings allow for cursor movements.","title":"Movement"},{"location":"emacs-editor/#bufferfile","text":"Keys Description M-< Move to beginning of buffer/file. M-> Move to end of buffer/file. C-v Move one screen forward. M-v Move one screen backward. C-l Center screen on position at cursor.","title":"Buffer/File"},{"location":"emacs-editor/#lines","text":"Keys Description C-a Move to beginning of line. C-e Move to end of line. C-n Move to the next line. C-p Move to the previous line. M-g g Go to line.","title":"Lines"},{"location":"emacs-editor/#words","text":"Keys Description M-f Move forward one word. M-b Move backward one word.","title":"Words"},{"location":"emacs-editor/#characters","text":"Keys Description C-f Move forward one character. C-b Move backward one character.","title":"Characters"},{"location":"emacs-editor/#searching","text":"Keys Description C-s Regex search for text in current buffer and move to it. Press C-s again to move to next match. C-r Same as C-s, but search in reverse. M-% Search and replace.","title":"Searching"},{"location":"emacs-editor/#kill-ring-copycutpaste","text":"Keys Description C-spacebar Create a region (select). Use movement keys to expand the region selected. Then use copy/cut commands below. M-w Copy region to kill ring (copy). C-w Kill region (cut). C-y Yank (paste). M-y Cycle through kill ring after yanking/pasting. This is like a copy/paste clipboard. M-d Kill/delete word starting at cursor (cut). C-k Kill/delete line starting at cursor (cut).","title":"Kill Ring (Copy/Cut/Paste)"},{"location":"emacs-editor/#editing","text":"Keys Description Tab Indent line. C-j New line and indent, equivalent to enter followed by tab. M-\\ Delete all spaces and tabs around point. C-d Delete the next character. M-backspace Delete previous word. C-x space (use movement keys to select up/down).C-x r t (type key to insert, then Enter) Rectangle mode","title":"Editing"},{"location":"emacs-editor/#formatting-tricks","text":"Keys Description C-t Swap two characters at the point/cursor. M-u Change the word at the point/cursor to uppercase. M-l Change the word at the point/cursor to lowercase. C-u n char Insert 'n' (a number) copies of 'char' (a character).","title":"Formatting Tricks"},{"location":"emacs-editor/#help","text":"Keys Description C-h k key-binding Describe the function bound to the key binding. To get this to work, you actually perform the key sequence after typing C-h k. C-h f Describe function.","title":"Help"},{"location":"emacs-editor/#windows-and-frame","text":"Keys Description C-x o Switch cursor to another window. C-x 1 Delete all other windows, leaving only the current window in the frame. This doesn\u2019t close your buffers, and it won\u2019t cause you to lose any work. C-x 2 Split frame above and below. C-x 3 Split frame side by side. C-x 0 Delete current window.","title":"Windows and Frame"},{"location":"emacs-editor/#plugin-cider","text":"","title":"Plugin: Cider"},{"location":"emacs-editor/#clojure-files","text":"Keys Description C-c M-n M-n Switch to namespace of current buffer. C-x C-e Evaluate expression immediately preceding point. C-c C-k Compile current buffer/file. C-c C-d C-d Display documentation for symbol under point. M-. and M-, Navigate to source code for symbol under point and return to your original buffer. C-c C-d C-a Apropros search; find arbitrary text across function names and documentation.","title":"Clojure Files"},{"location":"emacs-editor/#repl","text":"Keys Description M-x cider-jack-in Start a REPL. C-c C-x C-j C-j Alternative to start a REPL. C-\u2191, C-\u2193 Cycle through REPL history. C-enter Close parentheses and evaluate.","title":"REPL"},{"location":"emacs-editor/#plugin-paredit","text":"Keys Description M-x paredit-mode Toggle paredit mode. M-( Surround expression after point in parentheses (paredit-wrap-round). C-\u2192 Slurp; move closing parenthesis to the right to include next expression. C-\u2190 Barf; move closing parenthesis to the left to exclude last expression. C-M-f, C-M-b Move to the opening/closing parenthesis.","title":"Plugin: Paredit"},{"location":"git/","text":"GIT Git is a distributed version control system that tracks changes in any set of computer files, usually used for coordinating work among programmers collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows How to check your Git configuration: The command below returns a list of information about your git configuration including user name and email: git config -l How to setup your Git username: With the command below you can configure your user name: git config --global user.name \"Fabio\" How to setup your Git user email: This command lets you setup the user email address you'll use in your commits. git config --global user.email \"signups@fabiopacifici.com\" How to cache your login credentials in Git: You can store login credentials in the cache so you don't have to type them in each time. Just use this command: git config --global credential.helper cache How to initialize a Git repo: Everything starts from here. The first step is to initialize a new Git repo locally in your project root. You can do so with the command below: git init How to add a file to the staging area in Git: The command below will add a file to the staging area. Just replace filename_here with the name of the file you want to add to the staging area. git add filename_here How to add all files in the staging area in Git If you want to add all files in your project to the staging area, you can use a wildcard . and every file will be added for you. git add . How to add only certain files to the staging area in Git With the asterisk in the command below, you can add all files starting with 'fil' in the staging area. git add fil* How to check a repository's status in Git: This command will show the status of the current repository including staged, unstaged, and untracked files. git status How to commit changes in the editor in Git: This command will open a text editor in the terminal where you can write a full commit message. A commit message is made up of a short summary of changes, an empty line, and a full description of the changes after it. git commit How to commit changes with a message in Git: You can add a commit message without opening the editor. This command lets you only specify a short summary for your commit message. git commit -m \"your commit message here\" How to commit changes (and skip the staging area) in Git: You can add and commit tracked files with a single command by using the -a and -m options. git commit -a -m\"your commit message here\" How to see your commit history in Git: This command shows the commit history for the current repository: git log How to see your commit history including changes in Git: This command shows the commit's history including all files and their changes: git log -p How to see a specific commit in Git: This command shows a specific commit. Replace commit-id with the id of the commit that you find in the commit log after the word commit. git show commit-id How to see log stats in Git: This command will cause the Git log to show some statistics about the changes in each commit, including line(s) changed and file names. git log --stat How to see changes made before committing them using \"diff\" in Git: You can pass a file as a parameter to only see changes on a specific file. git diff shows only unstaged changes by default. We can call diff with the --staged flag to see any staged changes. git diff git diff all_checks.py git diff --staged How to see changes using \"git add -p\": This command opens a prompt and asks if you want to stage changes or not, and includes other options. git add -p How to remove tracked files from the current working tree in Git: This command expects a commit message to explain why the file was deleted. git rm filename How to rename files in Git: This command stages the changes, then it expects a commit message. git mv oldfile newfile How to ignore files in Git: Create a .gitignore file and commit it. How to revert unstaged changes in Git: git checkout filename How to revert staged changes in Git: You can use the -p option flag to specify the changes you want to reset. git reset HEAD filename git reset HEAD -p How to amend the most recent commit in Git: git commit --amend allows you to modify and add changes to the most recent commit. git commit --amend !!Note!!: fixing up a local commit with amend is great and you can push it to a shared repository after you've fixed it. But you should avoid amending commits that have already been made public. How to rollback the last commit in Git: git revert will create a new commit that is the opposite of everything in the given commit.We can revert the latest commit by using the head alias like this: git revert HEAD How to rollback an old commit in Git: You can revert an old commit using its commit id. This opens the editor so you can add a commit message. git revert comit_id_here How to create a new branch in Git: By default, you have one branch, the main branch. With this command, you can create a new branch. Git won't switch to it automatically \u2013 you will need to do it manually with the next command. git branch branch_name How to switch to a newly created branch in Git: When you want to use a different or a newly created branch you can use this command: git checkout branch_name How to list branches in Git: You can view all created branches using the git branch command. It will show a list of all branches and mark the current branch with an asterisk and highlight it in green. git branch How to create a branch in Git and switch to it immediately: In a single command, you can create and switch to a new branch right away. git checkout -b branch_name How to delete a branch in Git: When you are done working with a branch and have merged it, you can delete it using the command below: git branch -d branch_name How to merge two branches in Git: To merge the history of the branch you are currently in with the branch_name , you will need to use the command below: git merge branch_name How to show the commit log as a graph in Git: We can use --graph to get the commit log to show as a graph. Also, --oneline will limit commit messages to a single line. git log --graph --oneline How to show the commit log as a graph of all branches in Git: Does the same as the command above, but for all branches. git log --graph --online --all How to abort a conflicting merge in Git: If you want to throw a merge away and start over, you can run the following command: git merge --abort How to add a remote repository in Git This command adds a remote repository to your local repository (just replace https://repo_here with your remote repo URL). git add remote https://repo_here How to see remote URLs in Git: You can see all remote repositories for your local repository with this command: git remote -v How to get more info about a remote repo in Git: Just replace origin with the name of the remote obtained byrunning the git remote -v command. git remote show origin How to push changes to a remote repo in Git: When all your work is ready to be saved on a remote repository, you can push all changes using the command below: git push How to pull changes from a remote repo in Git: If other team members are working on your repository, you can retrieve the latest changes made to the remote repository with the command below: git pull How to check remote branches that Git is tracking: This command shows the name of all remote branches that Git is tracking for the current repository: git branch -r How to fetch remote repo changes in Git: This command will download the changes from a remote repo but will not perform a merge on your local branch (as git pull does that instead). git fetch How to check the current commits log of a remote repo in Git Commit after commit, Git builds up a log. You can find out the remote repository log by using this command: git log origin/main How to merge a remote repo with your local repo in Git: If the remote repository has changes you want to merge with your local, then this command will do that for you: git merge origin/main How to get the contents of remote branches in Git without automatically merging: This lets you update the remote without merging any content into thelocal branches. You can call git merge or git checkout to do the merge. git remote update How to push a new branch to a remote repo in Git: If you want to push a branch to a remote repository you can use the command below. Just remember to add -u to create the branch upstream: git push -u origin branch_name How to remove a remote branch in Git: If you no longer need a remote branch you can remove it using the command below: git push --delete origin branch_name_here How to use Git rebase: You can transfer completed work from one branch to another using git rebase . git rebase branch_name_here Git Rebase can get really messy if you don't do it properly. Before using this command I suggest that you re-read the official documentation here How to run rebase interactively in Git: You can run git rebase interactively using the -i flag.It will open the editor and present a set of commands you can use. git rebase -i master # p, pick = use commit # r, reword = use commit, but edit the commit message # e, edit = use commit, but stop for amending # s, squash = use commit, but meld into previous commit # f, fixup = like \"squash\", but discard this commit's log message # x, exec = run command (the rest of the line) using shell # d, drop = remove commit How to force a push request in Git: This command will force a push request. This is usually fine for pull request branches because nobody else should have cloned them.But this isn't something that you want to do with public repos. git push -f Conclusion These commands can dramatically improve your productivity in Git. You don't have to remember them all \u2013 that's why I have written this cheat sheet. Bookmark this page for future reference or print it if you like.","title":"Git"},{"location":"git/#git","text":"Git is a distributed version control system that tracks changes in any set of computer files, usually used for coordinating work among programmers collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows","title":"GIT"},{"location":"git/#how-to-check-your-git-configuration","text":"The command below returns a list of information about your git configuration including user name and email: git config -l","title":"How to check your Git configuration:"},{"location":"git/#how-to-setup-your-git-username","text":"With the command below you can configure your user name: git config --global user.name \"Fabio\"","title":"How to setup your Git username:"},{"location":"git/#how-to-setup-your-git-user-email","text":"This command lets you setup the user email address you'll use in your commits. git config --global user.email \"signups@fabiopacifici.com\"","title":"How to setup your Git user email:"},{"location":"git/#how-to-cache-your-login-credentials-in-git","text":"You can store login credentials in the cache so you don't have to type them in each time. Just use this command: git config --global credential.helper cache","title":"How to cache your login credentials in Git:"},{"location":"git/#how-to-initialize-a-git-repo","text":"Everything starts from here. The first step is to initialize a new Git repo locally in your project root. You can do so with the command below: git init","title":"How to initialize a Git repo:"},{"location":"git/#how-to-add-a-file-to-the-staging-area-in-git","text":"The command below will add a file to the staging area. Just replace filename_here with the name of the file you want to add to the staging area. git add filename_here","title":"How to add a file to the staging area in Git:"},{"location":"git/#how-to-add-all-files-in-the-staging-area-in-git","text":"If you want to add all files in your project to the staging area, you can use a wildcard . and every file will be added for you. git add .","title":"How to add all files in the staging area in Git"},{"location":"git/#how-to-add-only-certain-files-to-the-staging-area-in-git","text":"With the asterisk in the command below, you can add all files starting with 'fil' in the staging area. git add fil*","title":"How to add only certain files to the staging area in Git"},{"location":"git/#how-to-check-a-repositorys-status-in-git","text":"This command will show the status of the current repository including staged, unstaged, and untracked files. git status","title":"How to check a repository's status in Git:"},{"location":"git/#how-to-commit-changes-in-the-editor-in-git","text":"This command will open a text editor in the terminal where you can write a full commit message. A commit message is made up of a short summary of changes, an empty line, and a full description of the changes after it. git commit","title":"How to commit changes in the editor in Git:"},{"location":"git/#how-to-commit-changes-with-a-message-in-git","text":"You can add a commit message without opening the editor. This command lets you only specify a short summary for your commit message. git commit -m \"your commit message here\"","title":"How to commit changes with a message in Git:"},{"location":"git/#how-to-commit-changes-and-skip-the-staging-area-in-git","text":"You can add and commit tracked files with a single command by using the -a and -m options. git commit -a -m\"your commit message here\"","title":"How to commit changes (and skip the staging area) in Git:"},{"location":"git/#how-to-see-your-commit-history-in-git","text":"This command shows the commit history for the current repository: git log","title":"How to see your commit history in Git:"},{"location":"git/#how-to-see-your-commit-history-including-changes-in-git","text":"This command shows the commit's history including all files and their changes: git log -p","title":"How to see your commit history including changes in Git:"},{"location":"git/#how-to-see-a-specific-commit-in-git","text":"This command shows a specific commit. Replace commit-id with the id of the commit that you find in the commit log after the word commit. git show commit-id","title":"How to see a specific commit in Git:"},{"location":"git/#how-to-see-log-stats-in-git","text":"This command will cause the Git log to show some statistics about the changes in each commit, including line(s) changed and file names. git log --stat","title":"How to see log stats in Git:"},{"location":"git/#how-to-see-changes-made-before-committing-them-using-diff-in-git","text":"You can pass a file as a parameter to only see changes on a specific file. git diff shows only unstaged changes by default. We can call diff with the --staged flag to see any staged changes. git diff git diff all_checks.py git diff --staged","title":"How to see changes made before committing them using \"diff\" in Git:"},{"location":"git/#how-to-see-changes-using-git-add-p","text":"This command opens a prompt and asks if you want to stage changes or not, and includes other options. git add -p","title":"How to see changes using \"git add -p\":"},{"location":"git/#how-to-remove-tracked-files-from-the-current-working-tree-in-git","text":"This command expects a commit message to explain why the file was deleted. git rm filename","title":"How to remove tracked files from the current working tree in Git:"},{"location":"git/#how-to-rename-files-in-git","text":"This command stages the changes, then it expects a commit message. git mv oldfile newfile","title":"How to rename files in Git:"},{"location":"git/#how-to-ignore-files-in-git","text":"Create a .gitignore file and commit it.","title":"How to ignore files in Git:"},{"location":"git/#how-to-revert-unstaged-changes-in-git","text":"git checkout filename","title":"How to revert unstaged changes in Git:"},{"location":"git/#how-to-revert-staged-changes-in-git","text":"You can use the -p option flag to specify the changes you want to reset. git reset HEAD filename git reset HEAD -p","title":"How to revert staged changes in Git:"},{"location":"git/#how-to-amend-the-most-recent-commit-in-git","text":"git commit --amend allows you to modify and add changes to the most recent commit. git commit --amend !!Note!!: fixing up a local commit with amend is great and you can push it to a shared repository after you've fixed it. But you should avoid amending commits that have already been made public.","title":"How to amend the most recent commit in Git:"},{"location":"git/#how-to-rollback-the-last-commit-in-git","text":"git revert will create a new commit that is the opposite of everything in the given commit.We can revert the latest commit by using the head alias like this: git revert HEAD","title":"How to rollback the last commit in Git:"},{"location":"git/#how-to-rollback-an-old-commit-in-git","text":"You can revert an old commit using its commit id. This opens the editor so you can add a commit message. git revert comit_id_here","title":"How to rollback an old commit in Git:"},{"location":"git/#how-to-create-a-new-branch-in-git","text":"By default, you have one branch, the main branch. With this command, you can create a new branch. Git won't switch to it automatically \u2013 you will need to do it manually with the next command. git branch branch_name","title":"How to create a new branch in Git:"},{"location":"git/#how-to-switch-to-a-newly-created-branch-in-git","text":"When you want to use a different or a newly created branch you can use this command: git checkout branch_name","title":"How to switch to a newly created branch in Git:"},{"location":"git/#how-to-list-branches-in-git","text":"You can view all created branches using the git branch command. It will show a list of all branches and mark the current branch with an asterisk and highlight it in green. git branch","title":"How to list branches in Git:"},{"location":"git/#how-to-create-a-branch-in-git-and-switch-to-it-immediately","text":"In a single command, you can create and switch to a new branch right away. git checkout -b branch_name","title":"How to create a branch in Git and switch to it immediately:"},{"location":"git/#how-to-delete-a-branch-in-git","text":"When you are done working with a branch and have merged it, you can delete it using the command below: git branch -d branch_name","title":"How to delete a branch in Git:"},{"location":"git/#how-to-merge-two-branches-in-git","text":"To merge the history of the branch you are currently in with the branch_name , you will need to use the command below: git merge branch_name","title":"How to merge two branches in Git:"},{"location":"git/#how-to-show-the-commit-log-as-a-graph-in-git","text":"We can use --graph to get the commit log to show as a graph. Also, --oneline will limit commit messages to a single line. git log --graph --oneline","title":"How to show the commit log as a graph in Git:"},{"location":"git/#how-to-show-the-commit-log-as-a-graph-of-all-branches-in-git","text":"Does the same as the command above, but for all branches. git log --graph --online --all","title":"How to show the commit log as a graph of all branches in Git:"},{"location":"git/#how-to-abort-a-conflicting-merge-in-git","text":"If you want to throw a merge away and start over, you can run the following command: git merge --abort","title":"How to abort a conflicting merge in Git:"},{"location":"git/#how-to-add-a-remote-repository-in-git","text":"This command adds a remote repository to your local repository (just replace https://repo_here with your remote repo URL). git add remote https://repo_here","title":"How to add a remote repository in Git"},{"location":"git/#how-to-see-remote-urls-in-git","text":"You can see all remote repositories for your local repository with this command: git remote -v","title":"How to see remote URLs in Git:"},{"location":"git/#how-to-get-more-info-about-a-remote-repo-in-git","text":"Just replace origin with the name of the remote obtained byrunning the git remote -v command. git remote show origin","title":"How to get more info about a remote repo in Git:"},{"location":"git/#how-to-push-changes-to-a-remote-repo-in-git","text":"When all your work is ready to be saved on a remote repository, you can push all changes using the command below: git push","title":"How to push changes to a remote repo in Git:"},{"location":"git/#how-to-pull-changes-from-a-remote-repo-in-git","text":"If other team members are working on your repository, you can retrieve the latest changes made to the remote repository with the command below: git pull","title":"How to pull changes from a remote repo in Git:"},{"location":"git/#how-to-check-remote-branches-that-git-is-tracking","text":"This command shows the name of all remote branches that Git is tracking for the current repository: git branch -r","title":"How to check remote branches that Git is tracking:"},{"location":"git/#how-to-fetch-remote-repo-changes-in-git","text":"This command will download the changes from a remote repo but will not perform a merge on your local branch (as git pull does that instead). git fetch","title":"How to fetch remote repo changes in Git:"},{"location":"git/#how-to-check-the-current-commits-log-of-a-remote-repo-in-git","text":"Commit after commit, Git builds up a log. You can find out the remote repository log by using this command: git log origin/main","title":"How to check the current commits log of a remote repo in Git"},{"location":"git/#how-to-merge-a-remote-repo-with-your-local-repo-in-git","text":"If the remote repository has changes you want to merge with your local, then this command will do that for you: git merge origin/main","title":"How to merge a remote repo with your local repo in Git:"},{"location":"git/#how-to-get-the-contents-of-remote-branches-in-git-without-automatically-merging","text":"This lets you update the remote without merging any content into thelocal branches. You can call git merge or git checkout to do the merge. git remote update","title":"How to get the contents of remote branches in Git without automatically merging:"},{"location":"git/#how-to-push-a-new-branch-to-a-remote-repo-in-git","text":"If you want to push a branch to a remote repository you can use the command below. Just remember to add -u to create the branch upstream: git push -u origin branch_name","title":"How to push a new branch to a remote repo in Git:"},{"location":"git/#how-to-remove-a-remote-branch-in-git","text":"If you no longer need a remote branch you can remove it using the command below: git push --delete origin branch_name_here","title":"How to remove a remote branch in Git:"},{"location":"git/#how-to-use-git-rebase","text":"You can transfer completed work from one branch to another using git rebase . git rebase branch_name_here Git Rebase can get really messy if you don't do it properly. Before using this command I suggest that you re-read the official documentation here","title":"How to use Git rebase:"},{"location":"git/#how-to-run-rebase-interactively-in-git","text":"You can run git rebase interactively using the -i flag.It will open the editor and present a set of commands you can use. git rebase -i master # p, pick = use commit # r, reword = use commit, but edit the commit message # e, edit = use commit, but stop for amending # s, squash = use commit, but meld into previous commit # f, fixup = like \"squash\", but discard this commit's log message # x, exec = run command (the rest of the line) using shell # d, drop = remove commit","title":"How to run rebase interactively in Git:"},{"location":"git/#how-to-force-a-push-request-in-git","text":"This command will force a push request. This is usually fine for pull request branches because nobody else should have cloned them.But this isn't something that you want to do with public repos. git push -f","title":"How to force a push request in Git:"},{"location":"git/#conclusion","text":"These commands can dramatically improve your productivity in Git. You don't have to remember them all \u2013 that's why I have written this cheat sheet. Bookmark this page for future reference or print it if you like.","title":"Conclusion"},{"location":"vi-commands/","text":"Basic Vi Commands vi is a screen-oriented text editor originally created for the Unix operating system. The portable subset of the behavior of vi and programs based on it, and the ex editor language supported within these programs, is described by the Single Unix Specification and POSIX. Modes & Controls Command Description vi filename Edit filename vi -r filename Edit last version of filename after crash vi + n filename Edit filename at end of file vi + filename Edit filename at end of file vi +/str filename Edit filename at first occurrence of str Command Description :w Save :x or :wq Save & Exit :q Exit if no changes made :q! Exit & discard any changes Cursor Navigation Command Description h or \u2190 Cursor left j or \u2193 Cursor down k or \u2191 Cursor up l or \u2192 Cursor right w Next word W Next blank delimited word b Start of word B Start of blank delimited word e End of word W End of blank delimited word ( Back a sentence ) Forward a sentence { Back a paragraph } Forward a paragraph 0 Beginning of line $ End of line 1G Start of file G End of file :n nth line of file f< char > Forward to char F< char > Back to char H Top of screen M Middle of screen L Bottom of screen % Matching bracket gg Start of document Inserting Text Command Description i Insert before cursor a Append after cursor I Insert before line A Append after line o Add new line after current line O Add new line before current line r Overwrite one character R Overwrite many characters :r file Reads file and inserts it after this line p Put after the position or line P Put before the position or line C Rewrite the whole line Marking Text (Visual Mode) Command Description v Start visual mode, mark lines, then do command (such as y-yank) V Start Likewise visual mode o Move to other end of marked area ctrl + v Start visual block mode O Move to Other corner of block aw Mark a word ab A () block (with braces) aB A {} block (with brackets) ib Inner () block iB Inner {} block esc Exit visual mode Visual commands Command Description > Shift right < Shift left y Yank (copy) marked text d Delete marked text ~ Switch case Cut and Paste Command Description yy yank (copy) a line 2yy yank 2 lines yw yank word y$ yank to end of line p put (paste) the clipboard after cursor P put (paste) before cursor dd delete (cut) a line dw delete (cut) the current word x delete (cut) current character Deleting Text Command Description x Delete character to right of cursor X Delete character to left of cursor D Delete the rest of line dd or :d Delete current line ndw Deletes the next n words ndb Deletes the previous n words ndd Deletes n lines starting with current :x,yd Delete lines x through y :r < file > Reads file and inserts it after this line d{nav_cmd} Overwrite many characters Searching Command Description /string Search forward for string ?string Search backwards for string n Go to next match N Go to previous match :set ic Ignore case while searching :set noic Case-sensitive searching :set nu Turn on line numbers :x,yg/str Search for str from line x to line y :g/str/cmd Run cmd on lines containing str * Search for next instance of current word # Search for last instance of current word :%s/old/new/g Replace all old with new throughout file :%s/old/new/gc Replace all old with new throughout file with confirmations Working with multiple files Command Description :e filename Edit a file in a new buffer :bnext (or :bn) Go to next buffer :bprev (of :bp) Go to previous buffer :bd Delete a buffer (close a file) :sp filename Open a file in a new buffer and split window ctrl + ws Split windows ctrl + ww Switch between windows ctrl + wq Quit a window ctrl + wv Split windows vertically Other Command Description u Undo last change J Join lines nJ Join next n lines . Repeat last command U Undo all changes to line ctrl + c Escape insert mode","title":"VI commands"},{"location":"vi-commands/#basic-vi-commands","text":"vi is a screen-oriented text editor originally created for the Unix operating system. The portable subset of the behavior of vi and programs based on it, and the ex editor language supported within these programs, is described by the Single Unix Specification and POSIX.","title":"Basic Vi Commands"},{"location":"vi-commands/#modes-controls","text":"Command Description vi filename Edit filename vi -r filename Edit last version of filename after crash vi + n filename Edit filename at end of file vi + filename Edit filename at end of file vi +/str filename Edit filename at first occurrence of str Command Description :w Save :x or :wq Save & Exit :q Exit if no changes made :q! Exit & discard any changes","title":"Modes &amp; Controls"},{"location":"vi-commands/#cursor-navigation","text":"Command Description h or \u2190 Cursor left j or \u2193 Cursor down k or \u2191 Cursor up l or \u2192 Cursor right w Next word W Next blank delimited word b Start of word B Start of blank delimited word e End of word W End of blank delimited word ( Back a sentence ) Forward a sentence { Back a paragraph } Forward a paragraph 0 Beginning of line $ End of line 1G Start of file G End of file :n nth line of file f< char > Forward to char F< char > Back to char H Top of screen M Middle of screen L Bottom of screen % Matching bracket gg Start of document","title":"Cursor Navigation"},{"location":"vi-commands/#inserting-text","text":"Command Description i Insert before cursor a Append after cursor I Insert before line A Append after line o Add new line after current line O Add new line before current line r Overwrite one character R Overwrite many characters :r file Reads file and inserts it after this line p Put after the position or line P Put before the position or line C Rewrite the whole line","title":"Inserting Text"},{"location":"vi-commands/#marking-text-visual-mode","text":"Command Description v Start visual mode, mark lines, then do command (such as y-yank) V Start Likewise visual mode o Move to other end of marked area ctrl + v Start visual block mode O Move to Other corner of block aw Mark a word ab A () block (with braces) aB A {} block (with brackets) ib Inner () block iB Inner {} block esc Exit visual mode","title":"Marking Text (Visual Mode)"},{"location":"vi-commands/#visual-commands","text":"Command Description > Shift right < Shift left y Yank (copy) marked text d Delete marked text ~ Switch case","title":"Visual commands"},{"location":"vi-commands/#cut-and-paste","text":"Command Description yy yank (copy) a line 2yy yank 2 lines yw yank word y$ yank to end of line p put (paste) the clipboard after cursor P put (paste) before cursor dd delete (cut) a line dw delete (cut) the current word x delete (cut) current character","title":"Cut and Paste"},{"location":"vi-commands/#deleting-text","text":"Command Description x Delete character to right of cursor X Delete character to left of cursor D Delete the rest of line dd or :d Delete current line ndw Deletes the next n words ndb Deletes the previous n words ndd Deletes n lines starting with current :x,yd Delete lines x through y :r < file > Reads file and inserts it after this line d{nav_cmd} Overwrite many characters","title":"Deleting Text"},{"location":"vi-commands/#searching","text":"Command Description /string Search forward for string ?string Search backwards for string n Go to next match N Go to previous match :set ic Ignore case while searching :set noic Case-sensitive searching :set nu Turn on line numbers :x,yg/str Search for str from line x to line y :g/str/cmd Run cmd on lines containing str * Search for next instance of current word # Search for last instance of current word :%s/old/new/g Replace all old with new throughout file :%s/old/new/gc Replace all old with new throughout file with confirmations","title":"Searching"},{"location":"vi-commands/#working-with-multiple-files","text":"Command Description :e filename Edit a file in a new buffer :bnext (or :bn) Go to next buffer :bprev (of :bp) Go to previous buffer :bd Delete a buffer (close a file) :sp filename Open a file in a new buffer and split window ctrl + ws Split windows ctrl + ww Switch between windows ctrl + wq Quit a window ctrl + wv Split windows vertically","title":"Working with multiple files"},{"location":"vi-commands/#other","text":"Command Description u Undo last change J Join lines nJ Join next n lines . Repeat last command U Undo all changes to line ctrl + c Escape insert mode","title":"Other"}]}